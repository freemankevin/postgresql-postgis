name: Build PostgreSQL with PostGIS



on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - '.github/workflows/build.yml'
      - 'pg_version.txt'
  workflow_dispatch:

jobs:
  update-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.extract.outputs.versions }}
      changed: ${{ steps.extract.outputs.changed }}
      build_required: ${{ steps.check-images.outputs.build_required }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract PostgreSQL versions
        id: extract
        run: |
          declare -A versions
          CHANGED=false
          echo "Checking PostgreSQL versions..."
          for major in 12 13 14 15 16 17; do
            echo "Processing major version $major"
            docker build --build-arg PG_MAJOR=$major --no-cache -t temp-image .
            NEW_VERSION=$(docker run --rm temp-image cat /pg_version)
            versions[$major]=$NEW_VERSION
            OLD_VERSION=$(grep "^$major :" pg_version.txt | cut -d':' -f2 | tr -d ' ' || echo "")
            if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
              CHANGED=true
              echo "Version changed for $major: $OLD_VERSION -> $NEW_VERSION"
            fi
            sed -i "/^$major :/d" pg_version.txt || true
            echo "$major : $NEW_VERSION" >> pg_version.txt
          done
          sort -o pg_version.txt pg_version.txt
          
          # 构建 JSON 输出
          JSON="{ "
          for major in 12 13 14 15 16 17; do
            if [ "$major" != "12" ]; then
              JSON="$JSON, "
            fi
            JSON="$JSON\"$major\": \"${versions[$major]}\""
          done
          JSON="$JSON }"
          echo "versions=$JSON" >> $GITHUB_OUTPUT
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT
      - name: Commit pg_version.txt
        if: steps.extract.outputs.changed == 'true'
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add pg_version.txt
          git commit -m "Update pg_version.txt with latest PostgreSQL versions"
          git push

  build:
    needs: update-versions
    if: ${{ github.event_name == 'workflow_dispatch' || needs.update-versions.outputs.changed == 'true' || steps.check-image.outputs.exists != 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg_major: [12, 13, 14, 15, 16, 17]
      fail-fast: false
      max-parallel: 3
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get PostgreSQL version
        id: version
        run: |
          # 确保版本号不为空
          PG_VERSION=$(echo '${{ needs.update-versions.outputs.versions }}' | jq -r ".\"${{ matrix.pg_major }}\"")
          if [ -z "$PG_VERSION" ]; then
            echo "Error: Empty version for PostgreSQL ${{ matrix.pg_major }}"
            exit 1
          fi
          echo "full_version=$PG_VERSION" >> $GITHUB_OUTPUT
          echo "postgis_version=3" >> $GITHUB_OUTPUT

      - name: Check if image exists
        id: check-image
        run: |
          # 检查Docker Hub上是否存在指定版本的镜像
          IMAGE_EXISTS=$(curl -s "https://hub.docker.com/v2/repositories/freelabspace/postgresql-postgis/tags/${{ steps.version.outputs.full_version }}/" | jq -r '.name')
          if [ "$IMAGE_EXISTS" != "null" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: freelabspace/postgresql-postgis:${{ steps.version.outputs.full_version }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            PG_MAJOR=${{ matrix.pg_major }}
          cache-from: |
            type=registry,ref=freelabspace/postgresql-postgis:buildcache-${{ matrix.pg_major }}
          cache-to: |
            type=registry,ref=freelabspace/postgresql-postgis:buildcache-${{ matrix.pg_major }},mode=max

      - name: Validate version
        run: |
          if [ -z "${{ steps.version.outputs.full_version }}" ]; then
            echo "Error: Docker tag cannot be empty"
            exit 1
          fi
          
      - name: Build and push with retries
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 30
          max_attempts: 3
          command: |
            docker buildx build \
              --context . \
              --file Dockerfile \
              --platform linux/amd64,linux/arm64 \
              --build-arg PG_MAJOR=${{ matrix.pg_major }} \
              --push \
              --tag freelabspace/postgresql-postgis:${{ steps.version.outputs.full_version }} \
              --label "${{ steps.meta.outputs.labels }}" \
              --cache-from type=registry,ref=freelabspace/postgresql-postgis:buildcache-${{ matrix.pg_major }} \
              --cache-to type=registry,ref=freelabspace/postgresql-postgis:buildcache-${{ matrix.pg_major }},mode=max