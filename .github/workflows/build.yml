name: Build PostgreSQL with PostGIS

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  update-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.extract.outputs.versions }}
      changed: ${{ steps.extract.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Extract PostgreSQL versions
        id: extract
        run: |
          echo "Checking PostgreSQL versions..."
          if [ ! -f pg_version.json ]; then
            echo "pg_version.json not found, creating..."
            python scripts/search-version.py
          fi
          if [ ! -f pg_version.json ]; then
            echo "Error: Failed to create pg_version.json"
            exit 1
          fi
          VERSIONS=$(cat pg_version.json)
          CHANGED=false
          if [ -f pg_version.old.json ]; then
            for major in 12 13 14 15 16 17; do
              NEW_VERSION=$(echo $VERSIONS | jq -r ".\"$major\"")
              OLD_VERSION=$(cat pg_version.old.json | jq -r ".\"$major\"")
              if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
                CHANGED=true
                echo "Version changed for $major: $OLD_VERSION -> $NEW_VERSION"
              fi
            done
          else
            CHANGED=true
          fi
          cp pg_version.json pg_version.old.json
          echo "versions=$(echo $VERSIONS | jq -c)" >> $GITHUB_OUTPUT
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT
      - name: Commit pg_version.json
        if: steps.extract.outputs.changed == 'true'
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add pg_version.json pg_version.old.json
          git commit -m "Update pg_version.json with latest PostgreSQL versions"
          git push

  build:
    needs: update-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg_major: [12, 13, 14, 15, 16, 17]
      fail-fast: false
      max-parallel: 3
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get PostgreSQL version
        id: version
        run: |
          PG_VERSION=$(echo '${{ needs.update-versions.outputs.versions }}' | jq -r ".\"${{ matrix.pg_major }}\"")
          if [ -z "$PG_VERSION" ]; then
            echo "Error: Empty version for PostgreSQL ${{ matrix.pg_major }}"
            exit 1
          fi
          echo "full_version=$PG_VERSION" >> $GITHUB_OUTPUT
          echo "postgis_version=3" >> $GITHUB_OUTPUT
      - name: Check if image exists
        id: check-image
        run: |
          IMAGE_TAG="freelabspace/postgresql-postgis:${{ steps.version.outputs.full_version }}"
          IMAGE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" https://hub.docker.com/v2/repositories/${IMAGE_TAG}/)
          if [ "$IMAGE_EXISTS" = "200" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Build and push Docker image
        if: github.event_name == 'workflow_dispatch' || needs.update-versions.outputs.changed == 'true' || steps.check-image.outputs.exists != 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: freelabspace/postgresql-postgis:${{ steps.version.outputs.full_version }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            PG_MAJOR=${{ matrix.pg_major }}
          cache-from: type=registry,ref=freelabspace/postgresql-postgis:buildcache-${{ matrix.pg_major }}
          cache-to: type=registry,ref=freelabspace/postgresql-postgis:buildcache-${{ matrix.pg_major }},mode=max